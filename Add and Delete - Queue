package com.mycompany.queue;

public class Queue {
    private int[] queue;
    private int front, rear, size, capacity;

    // Constructor to initialize the queue
    public Queue(int capacity) {
        this.capacity = capacity;
        queue = new int[capacity];
        front = 0;
        rear = -1;
        size = 0;
    }

    // Enqueue (Add) an element to the queue
    public void enqueue(int value) {
        if (size == capacity) {
            System.out.println("Queue is full. Cannot add " + value);
        } else {
            rear = (rear + 1) % capacity;
            queue[rear] = value;
            size++;
            System.out.println(value + " added to the queue.");
        }
    }

    // Dequeue (Delete) an element from the queue
    public int dequeue() {
        if (size == 0) {
            System.out.println("Queue is empty. Cannot dequeue.");
            return -1;
        } else {
            int removedValue = queue[front];
            front = (front + 1) % capacity;
            size--;
            System.out.println(removedValue + " removed from the queue.");
            return removedValue;
        }
    }

    // Display the queue elements
    public void display() {
        if (size == 0) {
            System.out.println("Queue is empty.");
        } else {
            System.out.print("Queue contents: ");
            for (int i = 0; i < size; i++) {
                System.out.print(queue[(front + i) % capacity] + " ");
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        Queue myQueue = new Queue(5);
        
        myQueue.enqueue(10);
        myQueue.enqueue(20);
        myQueue.enqueue(30);
        myQueue.display();

        myQueue.dequeue();
        myQueue.display();
    }
}
